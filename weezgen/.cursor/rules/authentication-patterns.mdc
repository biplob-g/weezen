# Authentication and Clerk Patterns for WeezGen

## Clerk Configuration

### Middleware Setup
Reference [middleware.ts](mdc:middleware.ts) for authentication patterns:
```typescript
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";
import { NextResponse } from "next/server";

const publicRoutes = ["/chatbot(.*)"];
const isPublicRoute = createRouteMatcher(publicRoutes);

export default clerkMiddleware((auth, req) => {
  if (isPublicRoute(req)) {
    const response = NextResponse.next();
    return response;
  }
});

export const config = {
  matcher: ["/((?!_next/static|_next/image|favicon.ico|.*\\..*).*)"],
};
```

### Environment Variables
```bash
# Required Clerk environment variables
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/auth/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/auth/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard
```

## Client-Side Authentication

### User Authentication Hook
```typescript
import { useUser, useClerk } from "@clerk/nextjs";

export const useAuth = () => {
  const { user, isLoaded, isSignedIn } = useUser();
  const { signOut } = useClerk();
  
  const handleSignOut = () => {
    signOut(() => {
      // Redirect after sign out
      window.location.href = "/";
    });
  };
  
  return {
    user,
    isLoaded,
    isSignedIn,
    signOut: handleSignOut,
  };
};
```

### Protected Component Pattern
```typescript
"use client";

import { useUser } from "@clerk/nextjs";
import { redirect } from "next/navigation";

interface ProtectedComponentProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export const ProtectedComponent = ({ 
  children, 
  fallback = <div>Loading...</div> 
}: ProtectedComponentProps) => {
  const { isLoaded, isSignedIn } = useUser();
  
  if (!isLoaded) {
    return <>{fallback}</>;
  }
  
  if (!isSignedIn) {
    redirect("/auth/sign-in");
  }
  
  return <>{children}</>;
};
```

## Server-Side Authentication

### Server Actions with Auth
```typescript
"use server";

import { auth } from "@clerk/nextjs/server";
import { redirect } from "next/navigation";

export async function protectedServerAction() {
  const { userId } = await auth();
  
  if (!userId) {
    redirect("/auth/sign-in");
  }
  
  // Perform authenticated operation
  const result = await performAction(userId);
  
  return result;
}
```

### Database User Sync
```typescript
"use server";

import { auth } from "@clerk/nextjs/server";
import { client } from "@/lib/prisma";

export async function syncUserWithDatabase() {
  const { userId, user } = await auth();
  
  if (!userId || !user) {
    throw new Error("User not authenticated");
  }
  
  // Check if user exists in database
  const existingUser = await client.user.findUnique({
    where: { clerkId: userId },
  });
  
  if (!existingUser) {
    // Create user in database
    await client.user.create({
      data: {
        clerkId: userId,
        fullname: `${user.firstName} ${user.lastName}`,
        type: "USER",
      },
    });
  }
  
  return { success: true };
}
```

## Authentication UI Components

### Sign In Component
```typescript
"use client";

import { SignIn } from "@clerk/nextjs";

export default function SignInPage() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="w-full max-w-md">
        <SignIn 
          appearance={{
            elements: {
              formButtonPrimary: "bg-primary hover:bg-primary/90",
              card: "shadow-lg",
            },
          }}
        />
      </div>
    </div>
  );
}
```

### Sign Up Component
```typescript
"use client";

import { SignUp } from "@clerk/nextjs";

export default function SignUpPage() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="w-full max-w-md">
        <SignUp 
          appearance={{
            elements: {
              formButtonPrimary: "bg-primary hover:bg-primary/90",
              card: "shadow-lg",
            },
          }}
        />
      </div>
    </div>
  );
}
```

### User Profile Component
```typescript
"use client";

import { useUser } from "@clerk/nextjs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { useClerk } from "@clerk/nextjs";

export const UserProfile = () => {
  const { user } = useUser();
  const { signOut } = useClerk();
  
  if (!user) return null;
  
  return (
    <div className="flex items-center gap-3">
      <Avatar>
        <AvatarImage src={user.imageUrl} />
        <AvatarFallback>
          {user.firstName?.[0]}{user.lastName?.[0]}
        </AvatarFallback>
      </Avatar>
      
      <div className="flex flex-col">
        <span className="text-sm font-medium">
          {user.firstName} {user.lastName}
        </span>
        <span className="text-xs text-gray-500">{user.emailAddresses[0]?.emailAddress}</span>
      </div>
      
      <Button 
        variant="ghost" 
        size="sm"
        onClick={() => signOut()}
      >
        Sign Out
      </Button>
    </div>
  );
};
```

## Route Protection

### Protected Routes
```typescript
// app/(dashboard)/layout.tsx
import { auth } from "@clerk/nextjs";
import { redirect } from "next/navigation";

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { userId } = await auth();
  
  if (!userId) {
    redirect("/auth/sign-in");
  }
  
  return (
    <div className="flex h-screen">
      <Sidebar />
      <main className="flex-1 overflow-auto">
        {children}
      </main>
    </div>
  );
}
```

### Public Routes
```typescript
// app/chatbot/page.tsx
export default function ChatbotPage() {
  // This page is public and doesn't require authentication
  return (
    <div>
      <h1>Public Chatbot</h1>
      {/* Chatbot component */}
    </div>
  );
}
```

## User Data Management

### User Context
```typescript
// context/useAuthContext.tsx
"use client";

import { createContext, useContext, useEffect, useState } from "react";
import { useUser } from "@clerk/nextjs";
import { client } from "@/lib/prisma";

interface AuthContextType {
  user: any;
  isLoading: boolean;
  userData: any;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const { user, isLoaded } = useUser();
  const [userData, setUserData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    if (isLoaded && user) {
      // Fetch additional user data from database
      const fetchUserData = async () => {
        try {
          const dbUser = await client.user.findUnique({
            where: { clerkId: user.id },
            include: { domains: true, subscription: true },
          });
          setUserData(dbUser);
        } catch (error) {
          console.error("Error fetching user data:", error);
        } finally {
          setIsLoading(false);
        }
      };
      
      fetchUserData();
    } else if (isLoaded) {
      setIsLoading(false);
    }
  }, [isLoaded, user]);
  
  return (
    <AuthContext.Provider value={{ user, isLoading, userData }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuthContext = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuthContext must be used within an AuthProvider");
  }
  return context;
};
```

## Error Handling

### Authentication Errors
```typescript
"use client";

import { useClerk } from "@clerk/nextjs";
import { toast } from "sonner";

export const useAuthErrorHandler = () => {
  const { signOut } = useClerk();
  
  const handleAuthError = (error: any) => {
    if (error?.status === 401) {
      toast.error("Session expired. Please sign in again.");
      signOut();
    } else {
      toast.error("Authentication error occurred");
    }
  };
  
  return { handleAuthError };
};
```

### Session Management
```typescript
// hooks/useSession.ts
import { useUser } from "@clerk/nextjs";
import { useEffect } from "react";

export const useSession = () => {
  const { user, isLoaded, isSignedIn } = useUser();
  
  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      // Handle session expiration
      window.location.href = "/auth/sign-in";
    }
  }, [isLoaded, isSignedIn]);
  
  return { user, isLoaded, isSignedIn };
};
```

## Security Best Practices

### Input Validation
```typescript
import { z } from "zod";

const userUpdateSchema = z.object({
  fullname: z.string().min(1).max(100),
  type: z.enum(["USER", "ADMIN"]),
});

export async function updateUserProfile(data: unknown) {
  const validatedData = userUpdateSchema.parse(data);
  
  // Update user profile
  return await client.user.update({
    where: { clerkId: userId },
    data: validatedData,
  });
}
```

### Rate Limiting
```typescript
// Implement rate limiting for authentication endpoints
export async function rateLimitedAuthAction(action: () => Promise<any>) {
  // Add rate limiting logic here
  return await action();
}
```

## Testing Authentication

### Mock Authentication
```typescript
// __tests__/auth.test.tsx
import { render, screen } from "@testing-library/react";
import { ClerkProvider } from "@clerk/nextjs";

const mockUser = {
  id: "user_123",
  firstName: "John",
  lastName: "Doe",
  emailAddresses: [{ emailAddress: "john@example.com" }],
};

const renderWithAuth = (component: React.ReactNode) => {
  return render(
    <ClerkProvider>
      {component}
    </ClerkProvider>
  );
};
```
description:
globs:
alwaysApply: false
---
