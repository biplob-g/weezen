# Project Structure & Organization

## 📁 **Directory Structure**

```
weezgen/
├── .cursor/
│   └── rules/                    # Project documentation and patterns
│       ├── weezgen-overview.mdc
│       ├── database-patterns.mdc
│       ├── component-patterns.mdc
│       ├── project-structure.mdc
│       └── user-info-form-feature.mdc
├── actions/                      # Server Actions (API endpoints)
│   ├── appointments/
│   │   └── index.ts
│   ├── auth/
│   │   └── index.ts
│   ├── bot/
│   │   └── index.ts              # AI chatbot and conversation management
│   ├── conversation/
│   │   └── index.ts              # Customer and chat room management
│   ├── mailer/
│   │   └── index.ts
│   └── settings/
│       └── index.ts
├── app/                          # Next.js App Router pages
│   ├── (dashboard)/              # Protected admin routes
│   │   ├── conversation/
│   │   │   └── page.tsx          # Conversation management page
│   │   ├── layout.tsx            # Dashboard layout
│   │   ├── page.tsx              # Dashboard home
│   │   ├── portal/               # Customer portal
│   │   │   ├── [domainid]/
│   │   │   │   ├── appointments/
│   │   │   │   │   └── [customerid]/
│   │   │   │   │       └── page.tsx
│   │   │   │   └── payments/
│   │   │   │       └── [customerid]/
│   │   │   │           └── page.tsx
│   │   │   └── layout.tsx
│   │   └── settings/             # Domain settings
│   │       ├── [domain]/
│   │       │   └── page.tsx
│   │       └── page.tsx
│   ├── api/                      # API routes
│   │   └── test-chatbot/
│   ├── auth/                     # Authentication pages
│   │   ├── layout.tsx
│   │   ├── sign-in/
│   │   │   └── page.tsx
│   │   └── sign-up/
│   │       └── page.tsx
│   ├── chatbot/
│   │   └── page.tsx              # Public chatbot page
│   ├── favicon.ico
│   ├── globals.css               # Global styles
│   ├── layout.tsx                # Root layout
│   └── page.tsx                  # Landing page
├── components/                   # React components
│   ├── accordion/
│   │   └── index.tsx
│   ├── chatbot/                  # Chatbot interface components
│   │   ├── bubble.tsx            # Individual message bubbles
│   │   ├── index.tsx             # Main chatbot entry point
│   │   ├── realtime.tsx          # Real-time chat functionality
│   │   ├── responding.tsx        # AI typing indicator
│   │   ├── window.tsx            # Chatbot window with conditional rendering
│   │   ├── UserInfoForm.tsx      # ⭐ NEW: User information collection form
│   │   └── ChatHistory.tsx       # ⭐ NEW: Previous conversations display
│   ├── conversations/            # Admin conversation management
│   │   ├── chatCard.tsx          # Individual conversation cards with delete
│   │   ├── index.tsx             # Main conversation list with filtering
│   │   ├── messenger.tsx         # Chat interface for admin
│   │   └── search.tsx            # Domain selection and search
│   ├── drawer/
│   │   └── AppDrawer.tsx
│   ├── forms/                    # Form components
│   │   ├── portal/               # Customer portal forms
│   │   │   ├── portalForm.tsx
│   │   │   ├── PortalSteps.tsx
│   │   │   └── QuestionsForm.tsx
│   │   ├── SignIn/               # Authentication forms
│   │   │   ├── formProvider.tsx
│   │   │   └── loginForm.tsx
│   │   └── SignUp/               # Registration forms
│   │       ├── accountDetailsForm.tsx
│   │       ├── buttonHandler.tsx
│   │       ├── formGenerator/
│   │       │   └── index.tsx
│   │       ├── formProvider.tsx
│   │       ├── highlightsBar.tsx
│   │       ├── otpForm.tsx
│   │       ├── registrationStep.tsx
│   │       ├── settings/
│   │       │   ├── CodeSnippet.tsx
│   │       │   ├── DomainUpdate.tsx
│   │       │   ├── EditChatbotIcon.tsx
│   │       │   ├── form.tsx
│   │       │   └── greetingsMessage.tsx
│   │       ├── typeSeletionForm.tsx
│   │       └── userTypeCard.tsx
│   ├── Header/
│   │   └── Header.tsx
│   ├── infoBar/
│   │   ├── BreadCrumb.tsx
│   │   └── index.tsx
│   ├── loader/
│   │   └── index.tsx
│   ├── otp/
│   │   └── index.tsx
│   ├── portal/
│   │   └── banner.tsx
│   ├── provider/
│   │   └── theme-provider.tsx
│   ├── SectionLabel/
│   │   └── index.tsx
│   ├── settings/                 # Settings components
│   │   ├── BillingSettings.tsx
│   │   ├── BotTrainingForm.tsx
│   │   ├── ChangePassword.tsx
│   │   ├── DarkModeToggle.tsx
│   │   ├── FilterQuestions.tsx
│   │   └── HelpDesk.tsx
│   ├── Sidebar/                  # Navigation sidebar
│   │   ├── domainMenu.tsx
│   │   ├── index.tsx
│   │   ├── maximizedMenu.tsx
│   │   ├── menuItems.tsx
│   │   ├── minimizedmenu.tsx
│   │   └── useSidebar.tsx
│   ├── spinner/
│   │   └── index.tsx
│   ├── tabs/
│   │   └── index.tsx
│   ├── themes-placeholder/
│   │   ├── darkmode.tsx
│   │   ├── lightmode.tsx
│   │   └── systemMode.tsx
│   ├── ui/                       # shadcn/ui components
│   │   ├── accordion.tsx
│   │   ├── alert-dialog.tsx
│   │   ├── alert.tsx
│   │   ├── aspect-ratio.tsx
│   │   ├── avatar.tsx
│   │   ├── badge.tsx
│   │   ├── breadcrumb.tsx
│   │   ├── button.tsx
│   │   ├── calendar.tsx
│   │   ├── card.tsx
│   │   ├── carousel.tsx
│   │   ├── chart.tsx
│   │   ├── checkbox.tsx
│   │   ├── collapsible.tsx
│   │   ├── command.tsx
│   │   ├── context-menu.tsx
│   │   ├── dialog.tsx
│   │   ├── drawer.tsx
│   │   ├── dropdown-menu.tsx
│   │   ├── form.tsx
│   │   ├── hover-card.tsx
│   │   ├── input-otp.tsx
│   │   ├── input.tsx
│   │   ├── label.tsx
│   │   ├── menubar.tsx
│   │   ├── navigation-menu.tsx
│   │   ├── pagination.tsx
│   │   ├── popover.tsx
│   │   ├── progress.tsx
│   │   ├── radio-group.tsx
│   │   ├── resizable.tsx
│   │   ├── scroll-area.tsx
│   │   ├── select.tsx
│   │   ├── separator.tsx
│   │   ├── sheet.tsx
│   │   ├── sidebar.tsx
│   │   ├── skeleton.tsx
│   │   ├── slider.tsx
│   │   ├── sonner.tsx
│   │   ├── switch.tsx
│   │   ├── table.tsx
│   │   ├── tabs.tsx
│   │   ├── textarea.tsx
│   │   ├── toggle-group.tsx
│   │   ├── toggle.tsx
│   │   └── tooltip.tsx
│   └── uploadButton/
│       └── index.tsx
├── components.json               # shadcn/ui configuration
├── constants/                    # Application constants
│   ├── forms.ts                  # Form field configurations
│   └── menu.tsx                  # Menu structure
├── context/                      # React Context providers
│   ├── useAuthContext.tsx        # Authentication context
│   └── useChatContext.tsx        # Chat context
├── hooks/                        # Custom React hooks
│   ├── chatbot/
│   │   ├── useChatBot.ts         # Main chatbot logic
│   │   └── useCurrentDomain.ts   # Current domain management
│   ├── conversation/
│   │   └── useConversation.ts    # Conversation management
│   ├── portal/
│   │   └── usePortal.ts          # Portal functionality
│   ├── settings/
│   │   └── useSettings.ts        # Settings management
│   ├── sidebar/
│   │   └── useDomain.ts          # Domain management
│   ├── sign-in/
│   │   └── useSignIn.ts          # Sign-in functionality
│   ├── sign-up/
│   │   └── useSignUp.ts          # Sign-up functionality
│   └── use-mobile.ts             # Mobile detection
├── icons/                        # Custom icons
├── lib/                          # Utility libraries
│   ├── generated/                # Generated files
│   ├── prisma.ts                 # Prisma client configuration
│   ├── utils.ts                  # Utility functions
│   ├── countryCodes.ts           # ⭐ NEW: Country codes and IP detection
│   └── ipUtils.ts                # ⭐ NEW: IP address utilities
├── middleware.ts                 # Next.js middleware
├── middleware.txt                # Middleware documentation
├── next.config.ts                # Next.js configuration
├── package-lock.json
├── package.json                  # Dependencies and scripts
├── postcss.config.mjs            # PostCSS configuration
├── prisma/                       # Database schema and migrations
│   └── schema.prisma             # Database schema definition
├── public/                       # Static assets
│   ├── file.svg
│   ├── globe.svg
│   ├── images/
│   │   ├── app-ui.png
│   │   ├── bouncing-circles.svg
│   │   └── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── README.md                     # Project documentation
├── schemas/                      # Zod validation schemas
│   ├── auth.schema.ts            # Authentication schemas
│   ├── coversation.schema.ts     # Conversation and form schemas
│   └── settings.schema.ts        # Settings schemas
├── scripts/                      # ⭐ NEW: Database maintenance scripts
│   ├── cleanup-old-customers.ts  # Clean up old customer records
│   ├── test-ip-detection.ts      # Test IP detection functionality
│   ├── update-existing-customers.ts # Update existing customers with IPs
│   └── cleanup-all-data.ts       # Complete data cleanup for testing
├── tailwind.config.js            # Tailwind CSS configuration
└── tsconfig.json                 # TypeScript configuration
```

## 🔧 **Key File Descriptions**

### **Core Application Files**

#### **Configuration Files**

- **`next.config.ts`**: Next.js configuration with optimizations
- **`tailwind.config.js`**: Tailwind CSS configuration with custom theme
- **`tsconfig.json`**: TypeScript configuration with strict settings
- **`components.json`**: shadcn/ui component configuration
- **`package.json`**: Dependencies, scripts, and project metadata

#### **Database & Schema**

- **`prisma/schema.prisma`**: Database schema with Customer, ChatRoom, ChatMessage models
- **`lib/prisma.ts`**: Prisma client configuration and connection
- **`schemas/`**: Zod validation schemas for type safety

### **New Feature Files** ⭐

#### **User Information Form Feature**

- **`components/chatbot/UserInfoForm.tsx`**: Form component for collecting user details
- **`components/chatbot/ChatHistory.tsx`**: Component for displaying previous conversations
- **`lib/countryCodes.ts`**: Country codes data and IP-based country detection
- **`lib/ipUtils.ts`**: IP address validation and utility functions

#### **Database Maintenance Scripts**

- **`scripts/cleanup-old-customers.ts`**: Remove customer records older than 14 days
- **`scripts/test-ip-detection.ts`**: Test IP detection and customer data
- **`scripts/update-existing-customers.ts`**: Update existing customers with IP addresses
- **`scripts/cleanup-all-data.ts`**: Complete data cleanup for testing

### **Component Organization**

#### **Chatbot Components** (`components/chatbot/`)

- **`index.tsx`**: Main entry point for chatbot functionality
- **`window.tsx`**: Chatbot window with conditional rendering (form/history/chat)
- **`bubble.tsx`**: Individual message bubbles with error handling
- **`UserInfoForm.tsx`**: User information collection with country detection
- **`ChatHistory.tsx`**: Previous conversations display for returning users
- **`responding.tsx`**: AI typing indicator
- **`realtime.tsx`**: Real-time chat functionality

#### **Conversation Management** (`components/conversations/`)

- **`index.tsx`**: Main conversation list with filtering (All/Unread/Expired)
- **`chatCard.tsx`**: Individual conversation cards with delete functionality
- **`messenger.tsx`**: Chat interface for admin panel
- **`search.tsx`**: Domain selection and search functionality

#### **Form Components** (`components/forms/`)

- **`SignUp/`**: Multi-step registration process
- **`SignIn/`**: Authentication forms with error handling
- **`portal/`**: Customer portal forms and steps

### **Custom Hooks** (`hooks/`)

#### **Chatbot Hooks**

- **`useChatBot.ts`**: Main chatbot logic with IP-based user detection
- **`useCurrentDomain.ts`**: Current domain management

#### **Conversation Hooks**

- **`useConversation.ts`**: Conversation management with filtering and real-time updates

#### **Authentication Hooks**

- **`useSignIn.ts`**: Sign-in functionality with Clerk integration
- **`useSignUp.ts`**: Sign-up process management

### **Server Actions** (`actions/`)

#### **Bot Actions** (`actions/bot/`)

- **`index.ts`**: AI chatbot responses and conversation storage

#### **Conversation Actions** (`actions/conversation/`)

- **`index.ts`**: Customer management, IP-based detection, chat room operations

#### **Authentication Actions** (`actions/auth/`)

- **`index.ts`**: User authentication and authorization

## 🎯 **File Naming Conventions**

### **Component Files**

- **PascalCase**: `UserInfoForm.tsx`, `ChatHistory.tsx`
- **Descriptive names**: Clear indication of component purpose
- **Index files**: `index.tsx` for main component exports

### **Hook Files**

- **camelCase with 'use' prefix**: `useChatBot.ts`, `useConversation.ts`
- **Feature-specific**: Organized by feature area

### **Utility Files**

- **camelCase**: `ipUtils.ts`, `countryCodes.ts`
- **Descriptive**: Clear indication of functionality

### **Schema Files**

- **camelCase**: `coversation.schema.ts`, `auth.schema.ts`
- **Feature-based**: Organized by data domain

## 🔄 **Import Organization**

### **Import Order**

```typescript
// 1. React and Next.js imports
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

// 2. Third-party libraries
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

// 3. Internal utilities and configurations
import { cn } from "@/lib/utils";
import { client } from "@/lib/prisma";

// 4. Server actions
import { onCreateCustomerWithInfo } from "@/actions/conversation";

// 5. Schemas and types
import {
  UserInfoFormSchema,
  UserInfoFormProps,
} from "@/schemas/coversation.schema";

// 6. UI components
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

// 7. Custom hooks
import { useChatBot } from "@/hooks/chatbot/useChatBot";
```

### **Path Aliases**

- **`@/`**: Points to project root
- **`@/components/`**: React components
- **`@/hooks/`**: Custom hooks
- **`@/lib/`**: Utility libraries
- **`@/actions/`**: Server actions
- **`@/schemas/`**: Validation schemas

## 📦 **Module Organization**

### **Feature-Based Organization**

- **Chatbot**: All chatbot-related components, hooks, and actions
- **Conversations**: Admin conversation management
- **Authentication**: Sign-in/sign-up functionality
- **Settings**: Domain and application settings

### **Shared Components**

- **`components/ui/`**: Reusable UI components (shadcn/ui)
- **`components/forms/`**: Form components and patterns
- **`lib/`**: Utility functions and configurations

## 🚀 **Development Workflow**

### **Adding New Features**

1. **Create components** in appropriate feature directory
2. **Add custom hooks** for business logic
3. **Create server actions** for backend operations
4. **Define schemas** for type safety
5. **Update documentation** in `.cursor/rules/`

### **Database Changes**

1. **Update schema** in `prisma/schema.prisma`
2. **Generate client**: `npx prisma generate`
3. **Push changes**: `npx prisma db push`
4. **Update actions** to use new schema
5. **Add migration scripts** if needed

### **Component Development**

1. **Create component** with TypeScript interface
2. **Add form validation** with Zod schemas
3. **Implement error handling** with try-catch blocks
4. **Add loading states** for better UX
5. **Test with different data scenarios**

## 🔍 **File Search Patterns**

### **Finding Components**

```bash
# Find all chatbot components
find components/chatbot -name "*.tsx"

# Find all form components
find components/forms -name "*.tsx"

# Find all custom hooks
find hooks -name "*.ts"
```

### **Finding Server Actions**

```bash
# Find all server actions
find actions -name "*.ts"

# Find specific action types
find actions -name "*conversation*"
```

### **Finding Schemas**

```bash
# Find all schema files
find schemas -name "*.ts"

# Find specific schema types
find schemas -name "*auth*"
```

## 📋 **Maintenance Tasks**

### **Regular Cleanup**

- **Database**: Run `scripts/cleanup-old-customers.ts` periodically
- **Dependencies**: Update packages with `npm update`
- **TypeScript**: Check for type errors with `npm run type-check`
- **Linting**: Run `npm run lint` for code quality

### **Testing Scripts**

- **IP Detection**: Test with `scripts/test-ip-detection.ts`
- **Data Cleanup**: Use `scripts/cleanup-all-data.ts` for testing
- **Customer Updates**: Use `scripts/update-existing-customers.ts` for migration

### **Documentation Updates**

- **Update rules**: Keep `.cursor/rules/` files current
- **README**: Update project documentation
- **Comments**: Maintain inline code documentation
