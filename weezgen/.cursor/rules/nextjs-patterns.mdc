# Next.js 15 Best Practices for WeezGen

## App Router Patterns

### Server vs Client Components
- **Server Components** (default): No "use client" directive
- **Client Components**: Add "use client" at the top
- Use Server Components for data fetching and static content
- Use Client Components for interactivity and state

### Layout Structure
```typescript
// app/layout.tsx - Root layout
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
```

### Route Groups
Use parentheses for route grouping without affecting URL structure:
- `app/(dashboard)/` - Dashboard routes
- `app/(auth)/` - Authentication routes

### Server Actions
Use Server Actions instead of API routes:
```typescript
// actions/conversation/index.ts
"use server";

export async function onGetConversationMode(chatRoom: string) {
  // Server-side logic
  return { live: boolean };
}
```

## Data Fetching Patterns

### Server Components
```typescript
// app/page.tsx
async function getData() {
  const data = await prisma.user.findMany();
  return data;
}

export default async function Page() {
  const data = await getData();
  return <div>{/* render data */}</div>;
}
```

### Client Components with Server Actions
```typescript
// components/SomeComponent.tsx
"use client";

import { someServerAction } from "@/actions/someAction";

export default function SomeComponent() {
  const handleAction = async () => {
    const result = await someServerAction();
  };
}
```

## Middleware Configuration
Reference [middleware.ts](mdc:middleware.ts) for authentication patterns:
```typescript
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";

const publicRoutes = ["/chatbot(.*)"];
const isPublicRoute = createRouteMatcher(publicRoutes);
```

## Image Optimization
```typescript
import Image from "next/image";

// Configured in next.config.ts for external domains
<Image
  src="https://ucarecdn.com/..."
  alt="Description"
  width={100}
  height={100}
/>
```

## Environment Variables
- Use `NEXT_PUBLIC_` prefix for client-side variables
- Server-side variables don't need prefix
- Access via `process.env.VARIABLE_NAME`

## Performance Best Practices

### 1. Dynamic Imports
```typescript
import dynamic from "next/dynamic";

const DynamicComponent = dynamic(() => import("./Component"), {
  ssr: false,
  loading: () => <div>Loading...</div>,
});
```

### 2. Route Prefetching
```typescript
import Link from "next/link";

<Link href="/dashboard" prefetch={false}>
  Dashboard
</Link>
```

### 3. Metadata API
```typescript
import type { Metadata } from "next";

export const metadata: Metadata = {
  title: "Page Title",
  description: "Page description",
};
```

## Error Handling

### Error Boundaries
```typescript
// app/error.tsx
"use client";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  );
}
```

### Loading States
```typescript
// app/loading.tsx
export default function Loading() {
  return <div>Loading...</div>;
}
```

## Configuration
Reference [next.config.ts](mdc:next.config.ts) for:
- Image domain configuration
- Environment-specific settings
- Custom webpack configuration
description:
globs:
alwaysApply: false
---
