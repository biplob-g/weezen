# TypeScript Best Practices for WeezGen

## Type Safety and Interfaces

### Component Props
Always define proper TypeScript interfaces for component props:
```typescript
interface ComponentProps {
  title: string;
  description?: string;
  children: React.ReactNode;
  className?: string;
}
```

### Database Types
Use Prisma-generated types for database operations:
```typescript
import { Prisma } from "@/lib/generated/prisma";
type User = Prisma.UserGetPayload<{}>;
```

### Form Validation
Use Zod schemas for form validation:
```typescript
import { z } from "zod";
const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});
type FormData = z.infer<typeof formSchema>;
```

## TypeScript Configuration
- Use strict mode enabled in [tsconfig.json](mdc:tsconfig.json)
- Path aliases configured: `@/*` maps to `./*`
- Target ES2017 for compatibility
- Enable incremental compilation

## Best Practices

### 1. Type Imports
```typescript
// ✅ Good
import type { NextConfig } from "next";
import type { ComponentProps } from "react";

// ❌ Avoid
import { NextConfig } from "next";
```

### 2. Generic Types
Use generics for reusable components:
```typescript
interface FormFieldProps<T extends FieldValues> {
  name: FieldPath<T>;
  register: UseFormRegister<T>;
  errors: FieldErrors<T>;
}
```

### 3. Utility Types
Leverage TypeScript utility types:
```typescript
type OptionalProps = Partial<ComponentProps>;
type RequiredProps = Required<ComponentProps>;
type PickProps = Pick<ComponentProps, 'title' | 'description'>;
```

### 4. Strict Null Checks
Always handle null/undefined cases:
```typescript
// ✅ Good
const userName = user?.name ?? 'Anonymous';

// ❌ Avoid
const userName = user.name; // May crash if user is null
```

### 5. Enum Usage
Use enums for constants:
```typescript
enum UserRole {
  ADMIN = 'ADMIN',
  USER = 'USER',
}
```

## Error Handling
```typescript
try {
  const result = await someAsyncOperation();
  return result;
} catch (error) {
  console.error('Operation failed:', error);
  throw new Error('Custom error message');
}
```

## React Hooks Typing
```typescript
const useCustomHook = (): {
  data: DataType | null;
  loading: boolean;
  error: Error | null;
} => {
  // Implementation
};
```
description:
globs:
alwaysApply: false
---
