# WeezGen Project Overview

## 🚀 **Project Description**

WeezGen is a Next.js 15 chatbot platform that enables businesses to create and manage AI-powered chatbots for their websites. The platform features a comprehensive admin dashboard, real-time chat functionality, and advanced customer management with IP-based user tracking.

## 🛠 **Tech Stack**

- **Frontend**: Next.js 15 (App Router), React 19, TypeScript
- **Styling**: Tailwind CSS, shadcn/ui components
- **Backend**: Server Actions, Prisma ORM, PostgreSQL
- **Authentication**: Clerk
- **AI**: Google Generative AI (Gemini)
- **File Upload**: UploadCare
- **Forms**: React Hook Form, Zod validation
- **Real-time**: Pusher (for admin panel)
- **Notifications**: Sonner (admin only)

## 🎯 **Key Features**

### **Core Functionality**

- **Multi-domain Chatbot Management**: Create and manage chatbots for multiple domains
- **AI-Powered Conversations**: Integration with Google Gemini for intelligent responses
- **Real-time Chat**: Live messaging between customers and admin
- **Customer Management**: Track and manage customer interactions
- **Admin Dashboard**: Comprehensive interface for managing conversations and settings

### **User Information Form & IP-Based Chat History** ⭐ **NEW**

- **Smart User Detection**: Automatically detect returning users via IP address
- **User Information Collection**: Collect name, email, and phone (optional) from new users
- **IP-Based Chat History**: Show previous conversations for returning users (14-day retention)
- **Country Code Auto-Detection**: Automatically detect user's country for phone input
- **Personalized Welcome Messages**: AI greets users by name
- **Seamless User Experience**: New users see form, returning users see chat history

### **Admin Panel Features**

- **Conversation Management**: View, filter, and manage all customer conversations
- **Tab-based Filtering**: "All", "Unread", and "Expired" conversation tabs
- **Delete Conversations**: Remove conversations with confirmation dialogs
- **Real-time Updates**: Live updates when new messages arrive
- **Domain Management**: Switch between different domains
- **Settings Management**: Configure chatbot appearance and behavior

## 🏗 **Architecture Patterns**

### **Component Structure**

- **Functional Components**: All components use modern React patterns
- **Custom Hooks**: Extensive use of custom hooks for state management
- **Server Actions**: Backend logic handled through Next.js Server Actions
- **Context API**: Global state management for chat and authentication
- **Form Management**: React Hook Form with Zod validation

### **Database Design**

- **Relational Schema**: Well-structured Prisma schema with proper relationships
- **Cascade Deletes**: Proper cleanup when parent records are deleted
- **Indexed Fields**: Optimized queries for performance
- **Audit Trail**: Created/updated timestamps for tracking

### **Security & Performance**

- **Input Validation**: Comprehensive Zod schemas for all user inputs
- **Error Handling**: Robust error boundaries and user-friendly error messages
- **Type Safety**: Full TypeScript implementation
- **Optimistic Updates**: Immediate UI updates for better user experience

## 🔧 **Recent Updates & Bug Fixes**

### **Major Features Added**

- ✅ **User Information Form**: Collect customer details with IP-based country detection
- ✅ **IP-Based Chat History**: Show previous conversations for returning users
- ✅ **Delete Conversation**: Admin can delete conversations with confirmation
- ✅ **Enhanced Filtering**: Improved conversation filtering (All/Unread/Expired)
- ✅ **Country Code Integration**: Phone input with country flags and auto-detection

### **Critical Bug Fixes**

- ✅ **Infinite Loop Fix**: Resolved "Maximum update depth exceeded" error in conversations
- ✅ **AI Response Handling**: Fixed AI response parsing and error handling
- ✅ **Chat History Display**: Fixed returning user chat history not showing
- ✅ **Message Duplication**: Fixed duplicate messages in conversation view
- ✅ **Sign-in Functionality**: Fixed broken authentication flow
- ✅ **TypeScript Errors**: Resolved all linter and type errors
- ✅ **Database Schema**: Updated Customer model with IP tracking fields

### **Performance Improvements**

- ✅ **Optimistic Updates**: Immediate UI feedback for better responsiveness
- ✅ **Background Processing**: Non-blocking database operations
- ✅ **Memory Management**: Proper cleanup of event listeners and subscriptions
- ✅ **Error Boundaries**: Graceful handling of component errors

## 📁 **Project Structure**

```
weezgen/
├── actions/           # Server Actions (API endpoints)
├── app/              # Next.js App Router pages
├── components/       # React components
├── hooks/           # Custom React hooks
├── lib/             # Utilities and configurations
├── prisma/          # Database schema and migrations
├── schemas/         # Zod validation schemas
├── scripts/         # Database maintenance scripts
└── .cursor/rules/   # Project documentation and patterns
```

## 🚀 **Getting Started**

1. **Install Dependencies**: `npm install`
2. **Database Setup**: `npx prisma db push`
3. **Environment Variables**: Configure Clerk, Gemini, and database URLs
4. **Development**: `npm run dev`
5. **Build**: `npm run build`

## 🔮 **Future Enhancements**

- **Advanced Analytics**: Conversation insights and metrics
- **Multi-language Support**: Internationalization for global users
- **Advanced AI Features**: Custom training and response optimization
- **Mobile App**: Native mobile application for admin management
- **API Integration**: Webhook support for external integrations
