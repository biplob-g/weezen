# User Information Form Feature

## Overview

The user information form feature allows new chatbot users to provide their contact information before starting a conversation. This creates a personalized experience and captures lead information for the admin panel.

**NEW: IP-based Chat History** - The system now tracks users by IP address and shows their previous conversations for 14 days, eliminating the need for returning users to fill out the form again.

## Key Components

### 1. Database Schema Updates

**File**: `prisma/schema.prisma`

```prisma
model Customer {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?   // âœ… User's full name from form
  email       String?
  phone       String?   // âœ… User's phone number from form
  countryCode String?   @default("+1") // âœ… Country code from form
  ipAddress   String?   // âœ… NEW: IP address for tracking returning users
  domainId    String?   @db.Uuid
  chatRoom    ChatRoom[]
  questions   CustomerResponses[]
  createdAt   DateTime  @default(now()) // âœ… Track when customer was created
}
```

### 2. IP Address Utilities

**File**: `lib/ipUtils.ts`

```typescript
import { Address4, Address6 } from "ip-address";

// âœ… NEW: IP address validation and normalization
export const isValidIPAddress = (ip: string): boolean => {
  // Validates IPv4 and IPv6 addresses
};

export const normalizeIPAddress = (ip: string): string => {
  // Normalizes IP address format
};

export const getClientIP = (headers: Headers): string | null => {
  // Extracts client IP from request headers
};

export const isWithinRetentionPeriod = (createdAt: Date): boolean => {
  // Checks if record is within 14-day retention period
};
```

### 3. Country Codes Utility

**File**: `lib/countryCodes.ts`

```typescript
export interface CountryCode {
  name: string;
  code: string;
  dialCode: string;
  flag: string;
}

export const countryCodes: CountryCode[] = [
  { name: "United States", code: "US", dialCode: "+1", flag: "ðŸ‡ºðŸ‡¸" },
  // ... 100+ countries with unique dial codes
];

export const detectCountryFromIP = async (): Promise<
  CountryCode | undefined
> => {
  // Fetches user's country from ipapi.co
};
```

### 4. User Information Form Component

**File**: `components/chatbot/UserInfoForm.tsx`

```typescript
interface UserInfoFormComponentProps {
  onSubmit: (data: UserInfoFormProps) => void;
  loading?: boolean;
}

// Features:
// - Name, Email, Phone fields
// - Country code selector with flags
// - IP-based country detection
// - Form validation with Zod
// - Responsive design with shadcn/ui
```

### 5. Chat History Component

**File**: `components/chatbot/ChatHistory.tsx`

```typescript
// âœ… NEW: Component for displaying previous conversations
interface ChatHistoryProps {
  messages: ChatMessage[];
  customerName: string;
  onContinueChat: () => void;
  onStartNewChat: () => void;
}

// Features:
// - Preview of last 5 messages
// - Continue chat or start new options
// - 14-day retention notice
// - Responsive design
```

### 6. Schema Definitions

**File**: `schemas/coversation.schema.ts`

```typescript
export type UserInfoFormProps = {
  name: string;
  email: string;
  phone?: string;
  countryCode: string;
};

export const UserInfoFormSchema: ZodType<UserInfoFormProps> = z.object({
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Please enter a valid email address"),
  phone: z.string().optional(),
  countryCode: z.string().min(1, "Country code is required"),
});
```

### 7. Server Actions

**File**: `actions/conversation/index.ts`

```typescript
// âœ… NEW: IP-based customer management
export const onFindCustomerByIP = async (domainId: string) => {
  // Finds existing customer by IP address within 14 days
};

export const onUpdateCustomerIP = async (customerId: string) => {
  // Updates customer's IP address for returning users
};

export const onGetCustomerChatHistory = async (customerId: string) => {
  // Fetches complete chat history for a customer
};

export const onCleanupOldCustomers = async () => {
  // Removes customer records older than 14 days
};

export const onCreateCustomerWithInfo = async (
  domainId: string,
  userInfo: UserInfoFormProps
) => {
  // Creates customer with IP address tracking
  const headersList = await headers();
  const clientIP = getClientIP(headersList);

  const customer = await client.customer.create({
    data: {
      ...userInfo,
      ipAddress: clientIP, // âœ… Store IP address
      domainId: domainId,
      chatRoom: { create: {} },
    },
  });
};
```

### 8. Chatbot Hook Updates

**File**: `hooks/chatbot/useChatBot.ts`

```typescript
// âœ… NEW: States for IP-based detection
const [showChatHistory, setShowChatHistory] = useState<boolean>(false);
const [isCheckingIP, setIsCheckingIP] = useState<boolean>(false);
const [chatHistory, setChatHistory] = useState<ChatHistoryData | null>(null);

// âœ… NEW: IP-based customer detection
const onGetDomainChatBot = async (id: string) => {
  setIsCheckingIP(true);

  // Check for existing customer by IP first
  const existingCustomer = await onFindCustomerByIP(id);

  if (existingCustomer) {
    // Show chat history for returning user
    setShowChatHistory(true);
    setShowUserInfoForm(false);
    setChatHistory(existingCustomer.chatHistory);
  } else {
    // Show form for new user
    setShowUserInfoForm(true);
    setShowChatHistory(false);
  }

  setIsCheckingIP(false);
};

// âœ… NEW: Chat history handlers
const handleContinueChat = () => {
  // Continue from previous conversation
};

const handleStartNewChat = () => {
  // Start fresh conversation
};
```

## Integration Points

### 1. Chatbot Window

**File**: `components/chatbot/window.tsx`

```typescript
// âœ… NEW: Conditional rendering for different states
{
  isCheckingIP ? (
    <LoadingState message="Checking for previous conversations..." />
  ) : showUserInfoForm ? (
    <UserInfoForm onSubmit={onUserInfoSubmit} loading={loading} />
  ) : showChatHistory && chatHistory && currentCustomer ? (
    <ChatHistory
      messages={chatHistory.messages}
      customerName={currentCustomer.name}
      onContinueChat={onContinueChat}
      onStartNewChat={onStartNewChat}
    />
  ) : (
    <ChatInterface />
  );
}
```

### 2. AI Assistant Integration

**File**: `actions/bot/index.ts`

```typescript
export const onAiChatBotAssistant = async (
  id: string,
  chat: { role: "assistant" | "user"; content: string }[],
  author: "user",
  message: string,
  providedCustomerEmail?: string // âœ… Pass customer email
) => {
  // Uses provided email if available
  // Skips email collection if already provided
  // Personalized AI responses
};
```

### 3. Admin Panel Display

**File**: `components/conversations/messenger.tsx`

```typescript
// Customer information card
{
  customerInfo && (
    <Card className="mb-4 p-4">
      <div className="flex items-center gap-2">
        <User className="w-4 h-4" />
        <span className="font-medium">{customerInfo.name}</span>
      </div>
      <div className="flex items-center gap-2">
        <Mail className="w-4 h-4" />
        <span>{customerInfo.email}</span>
      </div>
      {customerInfo.phone && (
        <div className="flex items-center gap-2">
          <Phone className="w-4 h-4" />
          <span>
            {customerInfo.countryCode} {customerInfo.phone}
          </span>
        </div>
      )}
    </Card>
  );
}
```

## User Flow

### 1. New User Experience

1. User opens chatbot
2. System checks IP address for existing customers
3. No existing customer found
4. User information form appears
5. User fills name, email, phone (optional)
6. Country code auto-detected from IP
7. Form submission creates customer record with IP
8. Personalized welcome message displayed
9. Regular chat interface appears

### 2. Returning User Experience

1. User opens chatbot
2. System checks IP address for existing customers
3. Existing customer found within 14 days
4. Chat history component appears
5. User sees preview of previous conversation
6. User can choose to continue chat or start new
7. If continuing: previous messages loaded
8. If starting new: form appears for new conversation

### 3. Admin Experience

1. Admin views conversation list
2. Customer names and contact info visible
3. Admin clicks on conversation
4. Detailed customer information displayed
5. Full conversation history available
6. IP address tracking information available

## Error Handling

### 1. Form Validation

- Required field validation
- Email format validation
- Phone number validation
- Country code validation

### 2. Database Safety

- Optional chaining for all database access
- Null checks for customer data
- Safe property access in components
- IP address validation before storage

### 3. API Error Handling

- IP detection fallback to US
- Database connection error handling
- Form submission error recovery
- Chat history loading error handling

### 4. IP Address Handling

- âœ… NEW: Validates IP address format
- âœ… NEW: Handles IPv4 and IPv6 addresses
- âœ… NEW: Extracts IP from various headers
- âœ… NEW: Graceful fallback if IP detection fails

## Best Practices

### 1. Type Safety

- Strict TypeScript types
- Zod schema validation
- Proper interface definitions
- IP address type validation

### 2. User Experience

- IP-based country detection
- Flag icons in country selector
- Responsive form design
- Loading states for IP checking
- Chat history preview
- Clear retention period notice

### 3. Data Privacy

- Secure form submission
- Database encryption
- GDPR compliance considerations
- IP address privacy considerations
- 14-day data retention policy

### 4. Performance

- âœ… NEW: Efficient IP-based lookups
- âœ… NEW: Automatic cleanup of old records
- âœ… NEW: Optimized chat history loading
- âœ… NEW: Minimal database queries

## Testing Scenarios

### 1. Form Submission

- Valid data submission
- Invalid data handling
- Network error recovery
- Duplicate email handling

### 2. Country Detection

- IP detection success
- IP detection failure
- Country code selection
- Flag display

### 3. IP-based Detection

- âœ… NEW: Returning user detection
- âœ… NEW: New user detection
- âœ… NEW: IP address validation
- âœ… NEW: Chat history loading

### 4. Chat History

- âœ… NEW: History display
- âœ… NEW: Continue chat functionality
- âœ… NEW: Start new chat functionality
- âœ… NEW: 14-day retention enforcement

### 5. Admin Panel

- Customer info display
- Conversation linking
- Data persistence
- Real-time updates

## Maintenance

### 1. Cleanup Script

**File**: `scripts/cleanup-old-customers.ts`

```typescript
// âœ… NEW: Automated cleanup of old records
export const cleanupOldCustomers = async () => {
  const cutoffDate = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);

  const result = await client.customer.deleteMany({
    where: {
      createdAt: { lt: cutoffDate },
    },
  });

  console.log(`Cleaned up ${result.count} old records`);
};
```

### 2. Scheduled Tasks

- Run cleanup script daily
- Monitor database performance
- Track IP detection success rates
- Monitor chat history usage

## Future Enhancements

### 1. Additional Fields

- Company name
- Website URL
- Industry selection
- Project requirements

### 2. Advanced Features

- Lead scoring
- Email verification
- SMS verification
- Social login integration
- âœ… NEW: Multiple device support
- âœ… NEW: Chat export functionality

### 3. Analytics

- Form completion rates
- Country distribution
- Conversion tracking
- User journey analysis
- âœ… NEW: IP detection accuracy metrics
- âœ… NEW: Chat history usage analytics

### 4. Privacy Enhancements

- âœ… NEW: IP address anonymization
- âœ… NEW: User consent management
- âœ… NEW: Data export/deletion requests
- âœ… NEW: Enhanced GDPR compliance

---
